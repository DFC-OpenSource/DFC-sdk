Index: libffi-3.0.13/src/arm/ffi.c
===================================================================
--- libffi-3.0.13.orig/src/arm/ffi.c
+++ libffi-3.0.13/src/arm/ffi.c
@@ -582,6 +582,7 @@ ffi_closure_free (void *ptr)
 
 #else
 
+#if !(defined(__ARMEB__) && defined(__ARM_ARCH_7A__))
 #define FFI_INIT_TRAMPOLINE(TRAMP,FUN,CTX)				\
 ({ unsigned char *__tramp = (unsigned char*)(TRAMP);			\
    unsigned int  __fun = (unsigned int)(FUN);				\
@@ -595,7 +596,23 @@ ffi_closure_free (void *ptr)
                                                  /* Clear instruction   \
                                                     mapping.  */        \
  })
-
+#else /* armv7 big endian: be8 instructions are still little endian */
+#define FFI_INIT_TRAMPOLINE(TRAMP,FUN,CTX)				\
+({ unsigned char *__tramp = (unsigned char*)(TRAMP);			\
+   unsigned int  __fun = (unsigned int)(FUN);				\
+   unsigned int  __ctx = (unsigned int)(CTX);				\
+   unsigned char *insns = (unsigned char *)(CTX);                       \
+   *(unsigned int*) &__tramp[0] = 0x0f002de9; /* swab(0xe92d000f, 4) - stmfd sp!, {r0-r3} */ \
+   *(unsigned int*) &__tramp[4] = 0x00009fe5; /* swab(0xe59f0000, 4) - ldr r0, [pc] */ \
+   *(unsigned int*) &__tramp[8] = 0x00f09fe5; /* swab(0xe59ff000, 4) - ldr pc, [pc] */ \
+   *(unsigned int*) &__tramp[12] = __ctx;				\
+   *(unsigned int*) &__tramp[16] = __fun;				\
+   __clear_cache((&__tramp[0]), (&__tramp[19])); /* Clear data mapping.  */ \
+   __clear_cache(insns, insns + 3 * sizeof (unsigned int));             \
+                                                 /* Clear instruction   \
+                                                    mapping.  */        \
+ })
+#endif
 #endif
 
 /* the cif must already be prep'ed */
