Upstream-Status: Pending

Index: gcc-4.6.0/libstdc++-v3/config/locale/generic/c_locale.h
===================================================================
--- gcc-4.6.0.orig/libstdc++-v3/config/locale/generic/c_locale.h
+++ gcc-4.6.0/libstdc++-v3/config/locale/generic/c_locale.h
@@ -41,13 +41,22 @@
 
 #include <clocale>
 
+#ifdef __UCLIBC__
+#include <features.h>
+#include <ctype.h>
+#endif
+
 #define _GLIBCXX_NUM_CATEGORIES 0
 
 namespace std _GLIBCXX_VISIBILITY(default)
 {
 _GLIBCXX_BEGIN_NAMESPACE_VERSION
 
+#ifdef __UCLIBC__
+  typedef __ctype_touplow_t*	__c_locale;
+#else
   typedef int*			__c_locale;
+#endif
 
   // Convert numeric value of type double and long double to string and
   // return length of string.  If vsnprintf is available use it, otherwise
Index: gcc-4.6.0/libstdc++-v3/config/os/gnu-linux/ctype_base.h
===================================================================
--- gcc-4.6.0.orig/libstdc++-v3/config/os/gnu-linux/ctype_base.h
+++ gcc-4.6.0/libstdc++-v3/config/os/gnu-linux/ctype_base.h
@@ -34,6 +34,11 @@
 
 // Information as gleaned from /usr/include/ctype.h
 
+#ifdef __UCLIBC__
+#include <features.h>
+#include <ctype.h>
+#endif
+
 namespace std _GLIBCXX_VISIBILITY(default)
 {
 _GLIBCXX_BEGIN_NAMESPACE_VERSION
@@ -42,7 +47,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION
   struct ctype_base
   {
     // Non-standard typedefs.
+#ifdef __UCLIBC__
+    typedef const __ctype_touplow_t*	__to_type;
+#else
     typedef const int* 		__to_type;
+#endif
 
     // NB: Offsets into ctype<char>::_M_table force a particular size
     // on the mask type. Because of this, we don't use an enum.
Index: gcc-4.6.0/libstdc++-v3/config/locale/generic/c_locale.cc
===================================================================
--- gcc-4.6.0.orig/libstdc++-v3/config/locale/generic/c_locale.cc
+++ gcc-4.6.0/libstdc++-v3/config/locale/generic/c_locale.cc
@@ -264,5 +264,10 @@ _GLIBCXX_END_NAMESPACE_VERSION
 #ifdef _GLIBCXX_LONG_DOUBLE_COMPAT
 #define _GLIBCXX_LDBL_COMPAT(dbl, ldbl) \
   extern "C" void ldbl (void) __attribute__ ((alias (#dbl)))
+#ifdef __UCLIBC__
+// This is because __c_locale is of type __ctype_touplow_t* which is short on uclibc. for glibc its int*
+_GLIBCXX_LDBL_COMPAT(_ZSt14__convert_to_vIdEvPKcRT_RSt12_Ios_IostateRKPs, _ZSt14__convert_to_vIeEvPKcRT_RSt12_Ios_IostateRKPs);
+#else
 _GLIBCXX_LDBL_COMPAT(_ZSt14__convert_to_vIdEvPKcRT_RSt12_Ios_IostateRKPi, _ZSt14__convert_to_vIeEvPKcRT_RSt12_Ios_IostateRKPi);
+#endif
 #endif // _GLIBCXX_LONG_DOUBLE_COMPAT
