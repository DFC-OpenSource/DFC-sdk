diff -ur targetcli_tarball/scripts/targetcli targetcli_pc_edition/scripts/targetcli
--- targetcli_tarball/scripts/targetcli	2015-07-28 12:15:30.786725648 +0530
+++ targetcli_pc_edition/scripts/targetcli	2015-07-28 12:18:30.070728554 +0530
@@ -1,29 +1,29 @@
-#!/usr/bin/python
+#! /usr/bin/python
 '''
 Starts the targetcli CLI shell.
 
 This file is part of targetcli.
-Copyright (c) 2011 by RisingTide Systems LLC
+Copyright (c) 2011-2013 by Datera, Inc
 
-This program is free software: you can redistribute it and/or modify
-it under the terms of the GNU Affero General Public License as
-published by the Free Software Foundation, version 3 (AGPLv3).
-
-This program is distributed in the hope that it will be useful,
-but WITHOUT ANY WARRANTY; without even the implied warranty of
-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-GNU Affero General Public License for more details.
-
-You should have received a copy of the GNU Affero General Public License
-along with this program.  If not, see <http://www.gnu.org/licenses/>.
-Copyright (c) 2011 by RisingTide Systems LLC.
-All rights reserved.
+Licensed under the Apache License, Version 2.0 (the "License"); you may
+not use this file except in compliance with the License. You may obtain
+a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+License for the specific language governing permissions and limitations
+under the License.
 '''
 
 from os import getuid
 from targetcli import UIRoot
 from rtslib import RTSLibError
 from configshell import ConfigShell
+from rtslib import __version__ as rtslib_version
+from targetcli import __version__ as targetcli_version
 
 class TargetCLI(ConfigShell):
     default_prefs = {'color_path': 'magenta',
@@ -42,7 +42,7 @@
                      'tree_show_root': True,
                      'auto_enable_tpgt': True,
                      'auto_add_mapped_luns': True,
-                     'auto_cd_after_create': True,
+                     'auto_cd_after_create': False,
                      'legacy_hba_view': False
                     }
 
@@ -56,16 +56,12 @@
         is_root = False
 
     shell = TargetCLI('~/.targetcli')
-    shell.con.epy_write('''
-                        Welcome to the B{targetcli} shell::
-                         Copyright (c) 2011 by RisingTide Systems LLC.
-
-                        Visit us at U{http://www.risingtidesystems.com}.
-                       ''')
-    shell.con.display('')
+    shell.con.display("targetcli %s (rtslib %s)\n"
+                      "Copyright (c) 2011-2013 by Datera, Inc.\n"
+                      "All rights reserved."
+                      % (targetcli_version, rtslib_version))
     if not is_root:
-        shell.con.display('You are not root, disabling privileged commands.')
-        shell.con.display('')
+        shell.con.display("You are not root, disabling privileged commands.\n")
 
     root_node = UIRoot(shell, as_root=is_root)
 
diff -ur targetcli_tarball/targetcli/__init__.py targetcli_pc_edition/targetcli/__init__.py
--- targetcli_tarball/targetcli/__init__.py	2015-07-28 12:15:30.794725648 +0530
+++ targetcli_pc_edition/targetcli/__init__.py	2015-07-28 12:20:41.258730681 +0530
@@ -1,23 +1,23 @@
 '''
 This file is part of targetcli.
-Copyright (c) 2011 by RisingTide Systems LLC
+Copyright (c) 2011-2013 by Datera, Inc
 
-This program is free software: you can redistribute it and/or modify
-it under the terms of the GNU Affero General Public License as
-published by the Free Software Foundation, version 3 (AGPLv3).
+Licensed under the Apache License, Version 2.0 (the "License"); you may
+not use this file except in compliance with the License. You may obtain
+a copy of the License at
 
-This program is distributed in the hope that it will be useful,
-but WITHOUT ANY WARRANTY; without even the implied warranty of
-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-GNU Affero General Public License for more details.
+    http://www.apache.org/licenses/LICENSE-2.0
 
-You should have received a copy of the GNU Affero General Public License
-along with this program.  If not, see <http://www.gnu.org/licenses/>.
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+License for the specific language governing permissions and limitations
+under the License.
 '''
 
 from ui_root import UIRoot
 
-__version__ = '2.0rc1'
+__version__ = 'GIT_VERSION'
 __author__ = "Jerome Martin <jxm@risingtidesystems.com>"
 __url__ = "http://www.risingtidesystems.com"
 __description__ = "An administration shell for RTS storage targets."
diff -ur targetcli_tarball/targetcli/ui_backstore_legacy.py targetcli_pc_edition/targetcli/ui_backstore_legacy.py
--- targetcli_tarball/targetcli/ui_backstore_legacy.py	2015-07-28 12:15:30.794725648 +0530
+++ targetcli_pc_edition/targetcli/ui_backstore_legacy.py	2015-07-28 12:20:41.258730681 +0530
@@ -1,10 +1,20 @@
 '''
-Copyright (c) 2011 by RisingTide Systems LLC.
-All rights reserved.
+Implements the targetcli backstores related UI.
 
-Jerome Martin <jxm@risingtidesystems.com>
+his file is part of targetcli.
+Copyright (c) 2011-2013 by Datera, Inc
 
-Implements the targetcli backstores related UI.
+Licensed under the Apache License, Version 2.0 (the "License"); you may
+not use this file except in compliance with the License. You may obtain
+a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+License for the specific language governing permissions and limitations
+under the License.
 '''
 
 from ui_node import UINode, UIRTSLibNode
diff -ur targetcli_tarball/targetcli/ui_backstore.py targetcli_pc_edition/targetcli/ui_backstore.py
--- targetcli_tarball/targetcli/ui_backstore.py	2015-07-28 12:15:30.798725648 +0530
+++ targetcli_pc_edition/targetcli/ui_backstore.py	2015-07-28 12:20:41.258730681 +0530
@@ -2,19 +2,19 @@
 Implements the targetcli backstores related UI.
 
 This file is part of targetcli.
-Copyright (c) 2011 by RisingTide Systems LLC
+Copyright (c) 2011-2013 by Datera, Inc
 
-This program is free software: you can redistribute it and/or modify
-it under the terms of the GNU Affero General Public License as
-published by the Free Software Foundation, version 3 (AGPLv3).
+Licensed under the Apache License, Version 2.0 (the "License"); you may
+not use this file except in compliance with the License. You may obtain
+a copy of the License at
 
-This program is distributed in the hope that it will be useful,
-but WITHOUT ANY WARRANTY; without even the implied warranty of
-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-GNU Affero General Public License for more details.
+    http://www.apache.org/licenses/LICENSE-2.0
 
-You should have received a copy of the GNU Affero General Public License
-along with this program.  If not, see <http://www.gnu.org/licenses/>.
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+License for the specific language governing permissions and limitations
+under the License.
 '''
 
 from ui_node import UINode, UIRTSLibNode
diff -ur targetcli_tarball/targetcli/ui_node.py targetcli_pc_edition/targetcli/ui_node.py
--- targetcli_tarball/targetcli/ui_node.py	2015-07-28 12:15:30.794725648 +0530
+++ targetcli_pc_edition/targetcli/ui_node.py	2015-07-28 12:20:41.258730681 +0530
@@ -2,23 +2,39 @@
 Implements the targetcli base UI node.
 
 This file is part of targetcli.
-Copyright (c) 2011 by RisingTide Systems LLC
+Copyright (c) 2011-2013 by Datera, Inc
 
-This program is free software: you can redistribute it and/or modify
-it under the terms of the GNU Affero General Public License as
-published by the Free Software Foundation, version 3 (AGPLv3).
-
-This program is distributed in the hope that it will be useful,
-but WITHOUT ANY WARRANTY; without even the implied warranty of
-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-GNU Affero General Public License for more details.
-
-You should have received a copy of the GNU Affero General Public License
-along with this program.  If not, see <http://www.gnu.org/licenses/>.
+Licensed under the Apache License, Version 2.0 (the "License"); you may
+not use this file except in compliance with the License. You may obtain
+a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+License for the specific language governing permissions and limitations
+under the License.
 '''
 
 from configshell import ConfigNode, ExecutionError
 from rtslib import RTSLibError, RTSRoot
+from subprocess import PIPE, Popen
+from os.path import isfile
+from os import getuid
+
+def exec3(cmd):
+    '''
+    Executes a shell command **cmd** and returns
+    **(retcode, stdout, stderr)**.
+    '''
+    process = Popen(cmd, shell=True, bufsize=1024*1024,
+                    stdin=PIPE,
+                    stdout=PIPE, stderr=PIPE,
+                    close_fds=True)
+    (out, err) = process.communicate()
+    retcode = process.returncode
+    return (retcode, out, err)
 
 class UINode(ConfigNode):
     '''
@@ -89,6 +105,40 @@
             self.shell.log.debug("Command %s succeeded." % command)
             return result
 
+    def ui_command_exit(self):
+        '''
+        Exits the command line interface.
+        '''
+        config_needs_save = False
+        config_paths = {'tcm': "/etc/target/tcm_start.sh",
+                        'lio': "/etc/target/lio_start.sh"}
+        for mod_name, config_path in config_paths.items():
+            saved_config = ''
+            live_config = exec3("%s_dump --stdout" % mod_name)[1]
+            if isfile(config_path):
+                with open(config_path) as config_fh:
+                    saved_config = config_fh.read()
+            if saved_config != live_config:
+                config_needs_save = True
+                break
+
+        if config_needs_save and getuid() == 0:
+            self.shell.con.display("There are unsaved configuration changes.\n"
+                                   "If you exit now, configuration will not "
+                                   "be updated and changes will be lost upon "
+                                   "reboot.")
+            try:
+                input = raw_input("Type 'exit' if you want to exit anyway: ")
+            except EOFError:
+                input = None
+                self.shell.con.display('')
+            if input == "exit":
+                return 'EXIT'
+            else:
+                self.shell.log.warning("Aborted exit, use 'saveconfig' to "
+                                       "save the current configuration.")
+        else:
+            return 'EXIT'
 
     def ui_command_refresh(self):
         '''
@@ -142,6 +192,15 @@
             self.define_config_group_param(
                 'attribute', attribute, 'string', description, writable)
 
+        # If the rtsnode has auth_attrs, use them
+        auth_attrs = self.rtsnode.list_auth_attrs()
+        auth_attrs_ro = self.rtsnode.list_auth_attrs(writable=False)
+        for auth_attr in auth_attrs:
+            writable = auth_attr not in auth_attrs_ro
+            description = "The %s auth_attr." % auth_attr
+            self.define_config_group_param(
+                'auth', auth_attr, 'string', description, writable)
+
     def execute_command(self, command, pparams=[], kparams={}):
         '''
         Overrides the parent's execute_command() to check if the underlying
@@ -198,4 +257,25 @@
         self.assert_root()
         self.rtsnode.set_parameter(parameter, value)
 
+    def ui_getgroup_auth(self, auth_attr):
+        '''
+        This is the backend method for getting auth_attrs.
+        @param auth_attr: The auth_attr to get the value of.
+        @type auth_attr: str
+        @return: The auth_attr's value
+        @rtype: arbitrary
+        '''
+        return self.rtsnode.get_auth_attr(auth_attr)
+
+    def ui_setgroup_auth(self, auth_attr, value):
+        '''
+        This is the backend method for setting auth_attrs.
+        @param auth_attr: The auth_attr to set the value of.
+        @type auth_attr: str
+        @param value: The auth_attr's value
+        @type value: arbitrary
+        '''
+        self.assert_root()
+        self.rtsnode.set_auth_attr(auth_attr, value)
+
 
diff -ur targetcli_tarball/targetcli/ui_root.py targetcli_pc_edition/targetcli/ui_root.py
--- targetcli_tarball/targetcli/ui_root.py	2015-07-28 12:15:30.794725648 +0530
+++ targetcli_pc_edition/targetcli/ui_root.py	2015-07-28 12:20:41.258730681 +0530
@@ -2,19 +2,19 @@
 Implements the targetcli root UI.
 
 This file is part of targetcli.
-Copyright (c) 2011 by RisingTide Systems LLC
+Copyright (c) 2011-2013 by Datera, Inc
 
-This program is free software: you can redistribute it and/or modify
-it under the terms of the GNU Affero General Public License as
-published by the Free Software Foundation, version 3 (AGPLv3).
-
-This program is distributed in the hope that it will be useful,
-but WITHOUT ANY WARRANTY; without even the implied warranty of
-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-GNU Affero General Public License for more details.
-
-You should have received a copy of the GNU Affero General Public License
-along with this program.  If not, see <http://www.gnu.org/licenses/>.
+Licensed under the Apache License, Version 2.0 (the "License"); you may
+not use this file except in compliance with the License. You may obtain
+a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+License for the specific language governing permissions and limitations
+under the License.
 '''
 
 from os import system
@@ -48,8 +48,8 @@
             self.shell.log.debug("Refreshing in non-loaded mode.")
             for fabric_module in RTSRoot().fabric_modules:
                 if fabric_module:
-                    self.shell.log.info("Using %s fabric module." \
-                                        % fabric_module.name)
+                    self.shell.log.debug("Using %s fabric module." \
+                                         % fabric_module.name)
                     UIFabricModule(fabric_module, self)
                 elif self.as_root:
                     try:
@@ -57,11 +57,11 @@
                             (action, taken, desc) = step
                             if taken:
                                 self.shell.log.info(desc)
-                        self.shell.log.info("Done loading %s fabric module." \
-                                            % fabric_module.name)
+                        self.shell.log.debug("Done loading %s fabric module." \
+                                             % fabric_module.name)
                     except Exception, msg:
-                        self.shell.log.warning("Can't load fabric module %s."
-                                               % fabric_module.name)
+                        self.shell.log.debug("Can't load fabric module %s."
+                                             % fabric_module.name)
                         self.shell.log.debug(msg)
                     else:
                         UIFabricModule(fabric_module, self)
@@ -83,7 +83,11 @@
                                + "disk will overwrite your boot settings.")
         self.shell.con.display("The current target configuration will become "
                                + "the default boot config.")
-        input = raw_input("Are you sure? Type 'yes': ")
+        try:
+            input = raw_input("Are you sure? Type 'yes': ")
+        except EOFError:
+            input = None
+            self.shell.con.display('')
         if input == "yes":
             tcm_full_backup(None, None, '1', None)
         else:
diff -ur targetcli_tarball/targetcli/ui_target.py targetcli_pc_edition/targetcli/ui_target.py
--- targetcli_tarball/targetcli/ui_target.py	2015-07-28 12:15:30.794725648 +0530
+++ targetcli_pc_edition/targetcli/ui_target.py	2015-07-28 12:20:41.246730681 +0530
@@ -2,19 +2,19 @@
 Implements the targetcli target related UI.
 
 This file is part of targetcli.
-Copyright (c) 2011 by RisingTide Systems LLC
+Copyright (c) 2011-2013 by Datera, Inc
 
-This program is free software: you can redistribute it and/or modify
-it under the terms of the GNU Affero General Public License as
-published by the Free Software Foundation, version 3 (AGPLv3).
-
-This program is distributed in the hope that it will be useful,
-but WITHOUT ANY WARRANTY; without even the implied warranty of
-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-GNU Affero General Public License for more details.
-
-You should have received a copy of the GNU Affero General Public License
-along with this program.  If not, see <http://www.gnu.org/licenses/>.
+Licensed under the Apache License, Version 2.0 (the "License"); you may
+not use this file except in compliance with the License. You may obtain
+a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+License for the specific language governing permissions and limitations
+under the License.
 '''
 
 from ui_node import UINode, UIRTSLibNode
@@ -94,7 +94,7 @@
 
     def summary(self):
         no_targets = len(self._children)
-        if no_targets > 1:
+        if no_targets != 1:
             msg = "%d Targets" % no_targets
         else:
             msg = "%d Target" % no_targets
@@ -244,7 +244,7 @@
         else:
             is_healthy = None
             no_tpgs = len(self._children)
-            if no_tpgs > 1:
+            if no_tpgs != 1:
                 description = "%d TPGs" % no_tpgs
             else:
                 description = "%d TPG" % no_tpgs
@@ -421,7 +421,7 @@
 
     def summary(self):
         no_acls = len(self._children)
-        if no_acls > 1:
+        if no_acls != 1:
             msg = "%d ACLs" % no_acls
         else:
             msg = "%d ACL" % no_acls
@@ -515,52 +515,37 @@
     '''
     def __init__(self, node_acl, parent):
         UIRTSLibNode.__init__(self, node_acl.node_wwn, node_acl, parent)
+        self.define_config_group_param(
+            'attribute', 'tcq_depth', 'string', "Command queue depth.", True)
         self.cfs_cwd = node_acl.path
-
-        if self.rtsnode.has_feature('acls_auth'):
-            for parameter in ['userid', 'password',
-                              'mutual_userid', 'mutual_password']:
-                self.define_config_group_param('auth', parameter, 'string')
         self.refresh()
 
-    def ui_getgroup_auth(self, auth_attr):
-        '''
-        This is the backend method for getting auths attributes.
-        @param auth_attr: The auth attribute to get the value of.
-        @type auth_attr: str
-        @return: The auth attribute's value
-        @rtype: str
+    def ui_getgroup_attribute(self, attribute):
         '''
-        value = None
-        if auth_attr == 'password':
-            value = self.rtsnode.chap_password
-        elif auth_attr == 'userid':
-            value = self.rtsnode.chap_userid
-        elif auth_attr == 'mutual_password':
-            value = self.rtsnode.chap_mutual_password
-        elif auth_attr == 'mutual_userid':
-            value = self.rtsnode.chap_mutual_userid
-        return value
-
-    def ui_setgroup_auth(self, auth_attr, value):
-        '''
-        This is the backend method for setting auths attributes.
-        @param auth_attr: The auth attribute to set the value of.
-        @type auth_attr: str
-        @param value: The auth's value
-        @type value: str
+        This is the backend method for getting attributes.
+        @param attribute: The attribute to get the value of.
+        @type attribute: str
+        @return: The attribute's value
+        @rtype: arbitrary
+        '''
+        if attribute == 'tcq_depth':
+            return self.rtsnode.tcq_depth
+        else:
+            return self.rtsnode.get_attribute(attribute)
+
+    def ui_setgroup_attribute(self, attribute, value):
+        '''
+        This is the backend method for setting attributes.
+        @param attribute: The attribute to set the value of.
+        @type attribute: str
+        @param value: The attribute's value
+        @type value: arbitrary
         '''
         self.assert_root()
-        if value is None:
-            value = ''
-        if auth_attr == 'password':
-            self.rtsnode.chap_password = value
-        elif auth_attr == 'userid':
-            self.rtsnode.chap_userid = value
-        elif auth_attr == 'mutual_password':
-            self.rtsnode.chap_mutual_password = value
-        elif auth_attr == 'mutual_userid':
-            self.rtsnode.chap_mutual_userid = value
+        if attribute == 'tcq_depth':
+            self.rtsnode.tcq_depth = value
+        else:
+            self.rtsnode.set_attribute(attribute, value)
 
     def refresh(self):
         self._children = set([])
@@ -569,7 +554,7 @@
 
     def summary(self):
         no_mluns = len(self._children)
-        if no_mluns > 1:
+        if no_mluns != 1:
             msg = "%d Mapped LUNs" % no_mluns
         else:
             msg = "%d Mapped LUN" % no_mluns
@@ -682,7 +667,7 @@
 
     def summary(self):
         no_luns = len(self._children)
-        if no_luns > 1:
+        if no_luns != 1:
             msg = "%d LUNs" % no_luns
         else:
             msg = "%d LUN" % no_luns
@@ -693,9 +678,13 @@
         '''
         Creates a new LUN in the Target Portal Group, attached to a storage
         object. If the I{lun} parameter is omitted, the first available LUN in
-        the TPG will be used. The I{storage_object} must be the path of an
-        existing storage object, i.e. B{/backstore/pscsi0/mydisk} to reference
-        the B{mydisk} storage object of the virtual HBA B{pscsi0}.
+        the TPG will be used. If present, it must be a number greater than 0.
+        Alternatively, the syntax I{lunX} where I{X} is a positive number is
+        also accepted.
+        
+        The I{storage_object} must be the path of an existing storage object,
+        i.e. B{/backstore/pscsi0/mydisk} to reference the B{mydisk} storage
+        object of the virtual HBA B{pscsi0}.
 
         If I{add_mapped_luns} is omitted, the global parameter
         B{auto_add_mapped_luns} will be used, else B{true} or B{false} are
@@ -720,6 +709,8 @@
                 self.shell.log.info("Selected LUN %d." % lun)
         else:
             try:
+                if lun.startswith('lun'):
+                    lun = lun[3:]
                 lun = int(lun)
             except ValueError:
                 self.shell.log.error("The LUN must be an integer value.")
@@ -735,8 +726,9 @@
 
         try:
             storage_object = self.get_node(storage_object).rtsnode
-        except AttributeError:
-            self.shell.log.error("Wrong storage object path.")
+        except ValueError:
+            self.shell.log.error("Invalid storage object %s." % storage_object)
+            return
 
         lun_object = LUN(self.tpg, lun, storage_object)
         self.shell.log.info("Successfully created LUN %s." % lun_object.lun)
@@ -795,11 +787,16 @@
         Deletes the supplied LUN from the Target Portal Group. The I{lun} must
         be a positive number matching an existing LUN.
 
+        Alternatively, the syntax I{lunX} where I{X} is a positive number is
+        also accepted.
+
         SEE ALSO
         ========
         B{create}
         '''
         self.assert_root()
+        if lun.startswith('lun'):
+            lun = lun[3:]
         lun_object = LUN(self.tpg, lun)
         lun_object.delete()
         self.shell.log.info("Successfully deleted LUN %s." % lun)
@@ -883,7 +880,7 @@
 
     def summary(self):
         no_portals = len(self._children)
-        if no_portals > 1:
+        if no_portals != 1:
             msg = "%d Portals" % no_portals
         else:
             msg = "%d Portal" % no_portals
@@ -1026,8 +1023,31 @@
         name = "%s:%s" % (portal.ip_address, portal.port)
         UIRTSLibNode.__init__(self, name, portal, parent)
         self.cfs_cwd = portal.path
+        self.portal = portal
         self.refresh()
 
     def summary(self):
-        return ('', True)
+        if self.portal._get_iser_attr():
+            return ('OK, iser enabled', True)
+        else:
+            return ('OK, iser disabled', True)
 
+    def ui_command_iser_enable(self):
+        '''
+        Enables iser operation on an network portal.
+        '''
+        if self.portal._get_iser_attr() == True:
+            self.shell.log.info("iser operation has already been enabled")
+        else:
+            self.portal._set_iser_attr(True)
+            self.shell.log.info("iser operation has been enabled")
+
+    def ui_command_iser_disable(self):
+        '''
+        Disabled iser operation on an network portal.
+        '''
+        if self.portal._get_iser_attr() == False:
+            self.shell.log.info("iser operation has already been disabled")
+        else:
+            self.portal._set_iser_attr(False)
+            self.shell.log.info("iser operation has been disabled")
